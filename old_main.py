from collections import defaultdict
import telebot
from telebot import types
import webbrowser
import sqlite3
import requests
import json
from currency_converter import CurrencyConverter

bot = telebot.TeleBot("7747217090:AAGrLncvc0J_cDh3Z2RHZl8LrPQ7terbUMo")
currency = CurrencyConverter()
user_amounts = defaultdict(int)
API_WEATHER = '2820363b2f71d0dfa9f3a29bf6f6fb05'


@bot.message_handler(commands=['site'])
def site(message):
    bot.send_message(message.chat.id, 'https://www.youtube.com/watch?v=dQw4w9WgXcQ&pp=ygUIcmlja3JvbGw%3D')


@bot.message_handler(commands=['start'])
def main(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    site_btn = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
    markup.row(site_btn)

    with open('./crop.png', 'rb') as file:
        bot.send_photo(message.chat.id, file, reply_markup=markup)

    welcome_message = (f'–ó–¥–∞—Ä–æ–≤–∞, <b>{message.from_user.first_name}</b> <em><u>–ª–µ–≥–µ–Ω–¥–∞</u></em>!\n'
                     f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–∫–æ–ª—é—à–∫—É, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /site')
    bot.send_message(message.chat.id, welcome_message, parse_mode='html', reply_markup=markup)
    #bot.register_next_step_handler(message, on_click)


def on_click(message):
    print(message.text)
    if message.text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç':
        bot.send_message(message.chat.id, 'https://www.youtube.com', reply_markup=types.ReplyKeyboardRemove())


#-------------- add user --------------
@bot.message_handler(commands=['adduser'])
def add_user_command(message):
    with sqlite3.connect('mentalbot.sql') as conn:
        cur = conn.cursor()

        cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), password varchar(50))')
        conn.commit()

    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '–©–∞ —Ç–µ–±—è –∑–∞—Ä–µ–≥–∞–µ–º. –í–≤–µ–¥–∏ –∏–º—è')
    bot.register_next_step_handler(message, user_name)


def user_name(message):
    name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
    bot.register_next_step_handler(message, user_pass, name)


def user_pass(message, name):
    password = message.text.strip()
    with sqlite3.connect('mentalbot.sql') as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO users (name, password) VALUES (?, ?)", (name, password))
        conn.commit()

    cur.close()
    conn.close()

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users'))

    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    callback_data = call.data
    if callback_data == 'delete':
        handle_delete(call)
    elif callback_data == 'edit':
        handle_edit(call)
    elif callback_data == 'users':
        handle_users(call)
    elif callback_data in ['usd/eur', 'eur/usd', 'rub/usd', 'usd/rub', 'else']:
        handle_currency_conversion(call)


def handle_users(call):
    with sqlite3.connect('mentalbot.sql') as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM users")
        users = cur.fetchall()

    info = ''
    for el in users:
        info += f'–ò–º—è: {el[1]}, –ø–∞—Ä–æ–ª—å: {el[2]}\n'

    cur.close()
    conn.close()

    bot.send_message(call.message.chat.id, info)

#-------------- photo message --------------
@bot.message_handler(content_types=['photo'])
def get_photo(message):
    markup = telebot.types.InlineKeyboardMarkup()
    site_btn = telebot.types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://www.youtube.com')
    markup.row(site_btn)
    delete_btn = telebot.types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='delete')
    edit_btn = telebot.types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='edit')
    markup.row(delete_btn, edit_btn)

    bot.reply_to(message, '–ù—É –∏ —Å—Ç—Ä—ë–º–Ω–æ–µ –∂–µ —Ñ–æ—Ç–æ', reply_markup=markup)


def handle_delete(call):
    bot.delete_message(call.message.chat.id, call.message.message_id - 1)
    print('deleted')
    types.ReplyKeyboardRemove()


def handle_edit(call):
    bot.edit_message_text('Edit text', call.message.chat.id, call.message.message_id)
    types.ReplyKeyboardRemove()


#-------------- help --------------
@bot.message_handler(commands=['help'])
def get_photo(message):
    bot.send_message(message.chat.id, '–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


#-------------- weather --------------
@bot.message_handler(commands=['weather'])
def weather(message):
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    bot.register_next_step_handler(message, get_weather)


#@bot.message_handler(content_types=['text'])
def get_weather(message):
    city = message.text.strip().lower()
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_WEATHER}&units=metric')
    if res.status_code == 200:
        data = json.loads(res.text)
        print(data["main"]["temp"])
        bot.reply_to(message, f'–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city}: {round(data["main"]["temp"])} –≥—Ä–∞–¥—É—Å–æ–≤')
    else:
        bot.reply_to(message, '–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ')


#-------------- currency --------------
@bot.message_handler(commands=['currency'])
def converter(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É...')
    bot.register_next_step_handler(message, summ)


def summ(message):
    try:
        amount = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É')
        bot.register_next_step_handler(message, summ)
        return

    if amount > 0:
        user_amounts[message.chat.id] = amount

        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('USD/EUR', callback_data='usd/eur')
        btn2 = types.InlineKeyboardButton('EUR/USD', callback_data='eur/usd')
        btn3 = types.InlineKeyboardButton('–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', callback_data='else')
        markup.add(btn1, btn2, btn3)

        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        bot.register_next_step_handler(message, summ)
        return


def handle_currency_conversion(call):
    if call.data != 'else':
        values = call.data.upper().split('/')
        amount = user_amounts[call.message.chat.id]
        res = currency.convert(amount, values[0], values[1])
        bot.send_message(call.message.chat.id, f'–ò—Ç–æ–≥: {round(res, 2)}.')
        #bot.register_next_step_handler(call.message, summ)
    else:
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ '/'")
        bot.register_next_step_handler(call.message, my_currency)


def my_currency(message):
    try:
        values = message.text.upper().split('/')
        amount = user_amounts[message.chat.id]
        res = currency.convert(amount, values[0], values[1])
        bot.send_message(message.chat.id, f'–ò—Ç–æ–≥: {round(res, 2)}.')
    except Exception:
        bot.send_message(message.chat.id, '–í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        bot.register_next_step_handler(message, summ)


#-------------- other messages --------------
@bot.message_handler()
def info(message):
    if message.text.lower() == '–∑–¥–∞—Ä–æ–≤–∞':
        bot.send_message(message.chat.id, f'–ó–¥–∞—Ä–æ–≤–∞, {message.from_user.first_name}!üôÇ')
    elif message.text.lower() == 'id':
        bot.reply_to(message, f'–¢–≤–æ–π ID: {message.from_user.id}')
    else:
        bot.reply_to(message, f'{message.text} —ç—Ç–æ –±–∞–±–∫–∞ —Ç–≤–æ—è')


bot.polling(non_stop=True)
